name: CI/CD Pipeline with EC2 Deployment

on: 
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  #each job runs in separate, isolated environment
  test:
    #only in test job: connect to mysql
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: account_db
          MYSQL_USER: authuser
          MYSQL_PASSWORD: chenhaotian
        ports:
          - 3306:3306

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Wait for MySQL to be Ready
        run: |
          echo "Waiting for MySQL to be ready..."
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 --silent; then
              echo "MySQL is up!"
              exit 0
            fi
            echo "Waiting for database..."
            sleep 2
          done
          echo "MySQL failed to start in time!"
          exit 1

      - name: Build and Run Tests
        env:
          #referencing action runner, *use 127.0 instead of localhost
          #env pass to mvn builder, and to application.yml file
          MYSQL_HOST: 127.0.0.1 
          MYSQL_USER: authuser
          MYSQL_PASSWORD: chenhaotian
        run: mvn clean verify
    
  deploy:
    needs: test  # Only deploy if tests pass
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Build JAR file
        run: mvn clean package -DskipTests #package jar in target/ and skip all test

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker build -t nathanchan109/account-service .

      - name: Push Docker Image to Docker Hub
        run: docker push nathanchan109/account-service:latest

      - name: Deploy to EC2
        run: | 
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > account-service-key.pem
          chmod 600 account-service-key.pem  # Secure the key

          ssh -i account-service-key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_PUBLIC_IP }} <<EOF
          # Stop and remove existing containers if they exist
          docker stop account-service || true
          docker rm account-service || true
          docker stop mysql-db || true
          docker rm mysql-db || true

          # Create a Docker network (if not exists)
          docker network create banking-network || true

          # Start MySQL inside Docker
          docker run -d --name mysql-db \
            --network banking-network \
            -e MYSQL_ROOT_PASSWORD=root \
            -e MYSQL_DATABASE=account_db \
            -e MYSQL_USER=authuser \
            -e MYSQL_PASSWORD=chenhaotian \
            -p 3306:3306 mysql:latest

          # Pull the latest account-service Docker image
          docker pull nathanchan109/account-service:latest

          # Start account-service in the same network
          docker run -d --restart always --network banking-network \
          -p 8082:8082 --name account-service nathanchan109/account-service

          docker image prune -a -f  # Clean old images
          EOF